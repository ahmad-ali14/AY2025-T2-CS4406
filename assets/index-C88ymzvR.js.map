{"version":3,"file":"index-C88ymzvR.js","sources":["../../src/unit6/code.ts"],"sourcesContent":["import * as THREE from \"three\";\nimport { createBaseScene } from \"../utils/createBaseScene\";\n\nconst earthImageUrls = [\n    \"https://upload.wikimedia.org/wikipedia/commons/c/cf/WorldMap-A_non-Frame.png\",\n    \"https://upload.wikimedia.org/wikipedia/commons/thumb/9/97/The_Earth_seen_from_Apollo_17.jpg/300px-The_Earth_seen_from_Apollo_17.jpg\",\n];\nconst moonImageUrls = [\n    \"https://upload.wikimedia.org/wikipedia/commons/d/db/Moonmap_from_clementine_data.png\",\n    \"https://upload.wikimedia.org/wikipedia/commons/thumb/e/e1/FullMoon2010.jpg/280px-FullMoon2010.jpg\",\n];\nconst {\n    render,\n    scene,\n    directionalLight,\n    renderer,\n    canvas,\n    shouldShowWireframe,\n    sidebar,\n    addHelpNote,\n    ambientLight,\n} = createBaseScene({\n    sceneTitle: \"Unit 6: Earth and Moon\",\n    cameraZ: window.innerHeight / 3,\n    cameraFov: 90,\n    defaultLightColor: \"#fdfbd3\", // sun light color\n    showAxes: false,\n    showGrid: false,\n    useAmbientLight: true,\n    usePointLight: false,\n});\n\n// a base number that all other numbers will be relative to\nconst bl = 100;\n// for easy access to the edges of the scene\nconst sceneEdges = {\n    top: canvas.height / 2,\n    bottom: -canvas.height / 2,\n    left: -canvas.width / 2,\n    right: canvas.width / 2,\n};\n\n// earth: geometry + map + material\nconst earthGeometry = new THREE.SphereGeometry(bl, 32, 32);\nconst earthMap = new THREE.TextureLoader().load(earthImageUrls[0]!);\nconst earthMaterial = new THREE.MeshStandardMaterial({\n    wireframe: shouldShowWireframe(),\n    map: earthMap,\n});\nconst earth = new THREE.Mesh(earthGeometry, earthMaterial);\n\n// moon: geometry + map + material\nconst moonGeometry = new THREE.SphereGeometry(bl / 3, 32, 32);\nconst moonMap = new THREE.TextureLoader().load(moonImageUrls[0]!);\nconst moonMaterial = new THREE.MeshStandardMaterial({\n    wireframe: shouldShowWireframe(),\n    map: moonMap,\n});\n\nconst moon = new THREE.Mesh(moonGeometry, moonMaterial);\nmoon.position.x = bl * 2; // move moon to the right of the earth\n\nscene.add(earth, moon);\n\n// rotate the earth around itself\nconst rotateEarth = () => {\n    earth.rotation.y += bl / 10000;\n};\n\n// rotate the moon around itself\nconst rotateMoon = () => {\n    moon.rotation.y += bl / 10000;\n};\n\n// move moon around earth in a circular path\nconst moveMoonAroundEarth = (speed = 1) => {\n    moon.position.x = bl * 2 * Math.cos(earth.rotation.y * speed);\n    moon.position.z = bl * 2 * Math.sin(earth.rotation.y * speed);\n};\n\n/**\n * Setup sun light:\n * - position: center right of the screen\n */\ndirectionalLight.position.set(sceneEdges.right, 0, 0);\ndirectionalLight.intensity = 2;\n\n//setup a low-intensity ambient light to reduce blackness\nambientLight.intensity = bl / 9500;\n\n/**\n * Handling shadows:\n * - configure necessary objects to cast and receive shadows.\n * - configure the directional light position and other properties.\n * - set the light source at the top left corner of the canvas.\n * - configure the shadow camera properties.\n */\nrenderer.shadowMap.enabled = true;\nrenderer.shadowMap.type = THREE.PCFSoftShadowMap;\n\nearth.castShadow = true;\nearth.receiveShadow = true;\nmoon.castShadow = true;\nmoon.receiveShadow = true;\n\n// shadow camera properties\nconst dlCameraFactor = 20;\ndirectionalLight.castShadow = true;\ndirectionalLight.shadow.camera.near = bl * dlCameraFactor * 0;\ndirectionalLight.shadow.camera.far = bl * dlCameraFactor;\ndirectionalLight.shadow.camera.left = -bl * dlCameraFactor;\ndirectionalLight.shadow.camera.right = bl * dlCameraFactor;\ndirectionalLight.shadow.camera.top = bl * dlCameraFactor;\ndirectionalLight.shadow.camera.bottom = -bl * dlCameraFactor;\n\n// grouping materials for easy access\nconst materials = [earthMaterial, moonMaterial];\n\n/**\n * Scene Options:\n * - Rotate: Start/Stop the moon rotating around the earth.\n * - Rotation Speed: Adjust the speed of rotation. Default is 1.\n * - Rotation Direction: Change the direction of rotation. Default is counter clockwise.\n * - Rotation Axis: Change the axis of rotation, the shape will rotate around this axis.\n */\nconst sceneOptionsDiv = document.createElement(\"div\");\nsceneOptionsDiv.classList.add(\"mb-4\");\n\nsceneOptionsDiv.innerHTML = `\n    <hr class=\"border border-b-[#000] mb-2\" />\n    <h2 class=\"text-xl font-bold text-center mb-2\">Scene Options</h2>\n    <div class=\"flex flex-col space-y-2 text-lg\">\n        <div>\n            <input type=\"checkbox\" id=\"rotate\" checked>\n            <label for=\"rotate\" class=\"font-bold\">Rotate</label>\n        </div>\n        <div>\n            <label for=\"rotationSpeed\" class=\"font-bold\">Rotation Speed</label>\n            <input type=\"range\" id=\"rotationSpeed\" min=\"0\" max=\"3\" step=\"0.01\" value=\"0.01\">\n        </div>\n        <div class=\"\">\n            <label for=\"rotationDirection\" class=\"font-bold\">Rotation Direction</label>\n            <select id=\"rotationDirection\">\n                <option value=\"1\">Clockwise</option>\n                <option value=\"-1\">Counter Clockwise</option>\n            </select>\n        </div>\n       \n    </div>\n    `;\n\nsidebar.appendChild(sceneOptionsDiv);\n\n// control listeners\nlet shouldRotate = true;\nlet rotationSpeed = 1;\nlet rotationDirection = -1;\n\nconst rotateCheckbox = document.getElementById(\"rotate\") as HTMLInputElement;\nconst rotationSpeedInput = document.getElementById(\n    \"rotationSpeed\",\n) as HTMLInputElement;\nconst rotationDirectionSelect = document.getElementById(\n    \"rotationDirection\",\n) as HTMLSelectElement;\n\nrotateCheckbox.checked = shouldRotate;\nrotationSpeedInput.value = rotationSpeed.toString();\nrotationDirectionSelect.value = rotationDirection.toString();\n\nrotateCheckbox.addEventListener(\"change\", () => {\n    shouldRotate = rotateCheckbox.checked;\n});\n\nrotationSpeedInput.addEventListener(\"input\", () => {\n    rotationSpeed = parseFloat(rotationSpeedInput.value);\n});\n\nrotationDirectionSelect.addEventListener(\"change\", () => {\n    rotationDirection = parseFloat(rotationDirectionSelect.value);\n});\n\n/**\n * Animation Loop:\n * - rotate the earth around itself\n * - rotate the moon around itself\n * - move the moon around the earth (if rotation is enabled) with a given speed\n */\nconst animate = () => {\n    requestAnimationFrame(animate);\n    rotateEarth();\n    rotateMoon();\n    const speed = rotationDirection * rotationSpeed;\n    if (shouldRotate) moveMoonAroundEarth(speed);\n    render();\n\n    materials.forEach((material) => {\n        material.wireframe = shouldShowWireframe();\n    });\n};\n\nanimate();\n\n// help note: accessed  from the UI through the `Help` button.\naddHelpNote({\n    title: \"Scene Options\",\n    description: \"These options are specified for this scene:\",\n    points: [\n        \"Rotate: Start/Stop the moon rotating around the earth.\",\n        \"Rotation Speed: Adjust the speed of rotation. Default is 1.\",\n        \"Rotation Direction: Change the direction of rotation. Default is counter clockwise.\",\n    ],\n});\n"],"names":["earthImageUrls","moonImageUrls","render","scene","directionalLight","renderer","canvas","shouldShowWireframe","sidebar","addHelpNote","ambientLight","createBaseScene","bl","sceneEdges","earthGeometry","THREE.SphereGeometry","earthMap","THREE.TextureLoader","earthMaterial","THREE.MeshStandardMaterial","earth","THREE.Mesh","moonGeometry","moonMap","moonMaterial","moon","rotateEarth","rotateMoon","moveMoonAroundEarth","speed","THREE.PCFSoftShadowMap","dlCameraFactor","materials","sceneOptionsDiv","shouldRotate","rotationSpeed","rotationDirection","rotateCheckbox","rotationSpeedInput","rotationDirectionSelect","animate","material"],"mappings":"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"}