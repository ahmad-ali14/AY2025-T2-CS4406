{"version":3,"file":"index-H8MglrCh.js","sources":["../../src/unit2/code.ts"],"sourcesContent":["import * as THREE from \"three\";\nimport { createBaseScene } from \"../utils/createBaseScene\";\nimport { createTextSprite } from \"../utils/createTextSprite\";\n\nconst {\n    scene,\n    render,\n    addHelpNote,\n    shouldShowWireframe,\n    shouldShowLabels,\n    sidebar,\n} = createBaseScene({\n    sceneTitle: \"Unit 2: Polygon with 5 vertices\",\n    cameraZ: 20,\n});\n\nconst geometry = new THREE.BufferGeometry();\n\n/**\n * Creating 10 vertices for two faces of 3D pentagon.\n */\n// prettier-ignore\nconst vertices = new Float32Array([\n    0.0,  5.0,  0.0, // Top\n    4.8,  1.5,  0.0, // Top-right\n    3.0,  -4.0, 0.0, // Bottom-right\n    -3.0, -4.0, 0.0, // Bottom-left\n    -4.8, 1.5,  0.0, // Top-left\n    0.0,  5.0,  5.0, // Top - back\n    4.8,  1.5,  5.0, // Top-right - back\n    3.0,  -4.0, 5.0, // Bottom-right - back\n    -3.0, -4.0, 5.0, // Bottom-left - back\n    -4.8, 1.5,  5.0, // Top-left - back\n  ]);\n\n/**\n * Arranging the vertices into faces (triangles) of 3 vertices each.\n * Each line below contains 3 numbers that are indexes of vertices that form a face.\n * This is important to define the mesh structure so that it can be textured, shaded, and rendered.\n */\n// prettier-ignore\nconst indices = [\n  0, 1, 2, \n  0, 2, 3, \n  0, 3, 4, \n  5, 6, 7, \n  5, 7, 8, \n  5, 8, 9, \n  0, 5, 1, \n  1, 6, 2,\n  6, 7, 2,\n  2, 7, 3,\n  7, 8, 3,\n  3, 8, 4,\n  8, 9, 4,\n  4, 9, 0,\n  9, 5, 0,  \n  1, 5, 6,\n  3, 4, 8,\n  2, 3, 8,\n  2, 8, 7,\n];\n\n/**\n * Attaching the vertices and faces to the geometry object.\n * Computing the normal vectors is important for shading, interaction with light sources, and remove hidden surfaces.\n */\ngeometry.setAttribute(\"position\", new THREE.BufferAttribute(vertices, 3));\ngeometry.setIndex(indices);\ngeometry.computeVertexNormals();\n// geometry.computeBoundingSphere();\n\n/**\n * Organizing faces into groups, so that we can apply separate materials to each group.\n */\ngeometry.addGroup(0, 3, 0);\ngeometry.addGroup(3, 3, 1);\ngeometry.addGroup(6, 3, 2);\ngeometry.addGroup(9, 3, 3);\ngeometry.addGroup(12, 3, 4);\ngeometry.addGroup(15, 3, 0);\ngeometry.addGroup(18, 3, 1);\ngeometry.addGroup(21, 3, 2);\ngeometry.addGroup(24, 3, 3);\ngeometry.addGroup(27, 3, 4);\ngeometry.addGroup(30, 3, 0);\ngeometry.addGroup(33, 3, 1);\ngeometry.addGroup(36, 3, 2);\ngeometry.addGroup(39, 3, 3);\ngeometry.addGroup(42, 3, 4);\ngeometry.addGroup(45, 3, 0);\n\n/**\n * @returns Random shade of red color\n */\nconst shadeOfRed = () => {\n    const r = THREE.MathUtils.randInt(200, 255);\n    return new THREE.Color(`rgb(${r}, 0, 0)`);\n};\n\nconst baseMaterial: THREE.MeshLambertMaterialParameters = {\n    polygonOffset: true,\n    polygonOffsetUnits: 1,\n    polygonOffsetFactor: 1,\n    side: THREE.DoubleSide,\n    flatShading: false,\n    blending: THREE.NoBlending,\n    wireframe: false,\n    wireframeLinecap: \"round\",\n    wireframeLinejoin: \"round\",\n    wireframeLinewidth: 500,\n    color: `rgb(255, 0, 0)`,\n};\n\nconst createFaceMaterial = () => {\n    return new THREE.MeshLambertMaterial({\n        ...baseMaterial,\n        color: shadeOfRed(),\n    });\n};\n\n/**\n * Creating a separate material for each face.\n * All material are almost identical, except for the color that is slightly different for each face.\n */\nconst materials = [\n    createFaceMaterial(),\n    createFaceMaterial(),\n    createFaceMaterial(),\n    createFaceMaterial(),\n    createFaceMaterial(),\n    createFaceMaterial(),\n    createFaceMaterial(),\n    createFaceMaterial(),\n    createFaceMaterial(),\n    createFaceMaterial(),\n];\n\n/**\n * Define the mesh and add it to the scene.\n */\nconst mesh = new THREE.Mesh(geometry, materials);\nscene.add(mesh);\n\nconst numVertices = vertices.length / 3;\n\nconst verticesLabels: THREE.Sprite<THREE.Object3DEventMap>[] = [];\n\nfor (let i = 0; i < numVertices; i++) {\n    const x = vertices[i * 3] || 0;\n    const y = vertices[i * 3 + 1] || 0;\n    const z = vertices[i * 3 + 2] || 0;\n\n    const label = createTextSprite(`V${i}`);\n    label.position.set(x, y, z);\n    label.visible = false;\n\n    mesh.add(label);\n    verticesLabels.push(label);\n}\n\n// let's label the faces according to the indices and groups\n// label should be F + group number (0-indexed)\nconst faceLabels: THREE.Sprite<THREE.Object3DEventMap>[] = [];\n\nfor (let i = 0; i < geometry.groups.length; i++) {\n    const group = geometry.groups[i];\n    if (!group) {\n        continue;\n    }\n    const faceLabel = createTextSprite(`F${i}`);\n    const groupVerticesIndexes = [\n        indices[group.start],\n        indices[group.start + 1],\n        indices[group.start + 2],\n    ];\n\n    const faceCenterCoords = groupVerticesIndexes.reduce(\n        (acc, vertexIndex) => {\n            if (vertexIndex === undefined) {\n                return acc;\n            }\n            acc.x += vertices[vertexIndex * 3] || 0;\n            acc.y += vertices[vertexIndex * 3 + 1] || 0;\n            acc.z += vertices[vertexIndex * 3 + 2] || 0;\n            return acc;\n        },\n        { x: 0, y: 0, z: 0 },\n    );\n\n    const faceCenter = new THREE.Vector3(\n        faceCenterCoords.x / 3,\n        faceCenterCoords.y / 3,\n        faceCenterCoords.z / 3,\n    );\n    faceLabel.position.set(faceCenter.x, faceCenter.y, faceCenter.z);\n    faceLabel.visible = false;\n    mesh.add(faceLabel);\n    faceLabels.push(faceLabel);\n}\n\nlet shouldRotate = true;\nlet rotationSpeed = 0.01;\nlet rotationAxis = \"y\";\nlet rotationDirection = 1;\nlet showFacesLabels = false;\n\nconst sceneOptionsDiv = document.createElement(\"div\");\nsceneOptionsDiv.classList.add(\"mb-4\");\n\nsceneOptionsDiv.innerHTML = `\n    <hr class=\"border border-b-[#000] mb-2\" />\n    <h2 class=\"text-xl font-bold text-center mb-2\">Scene Options</h2>\n    <div class=\"flex flex-col space-y-2 text-lg\">\n        <div>\n            <input type=\"checkbox\" id=\"rotate\" checked>\n            <label for=\"rotate\" class=\"font-bold\">Rotate</label>\n        </div>\n        <div>\n            <label for=\"rotationSpeed\" class=\"font-bold\">Rotation Speed</label>\n            <input type=\"range\" id=\"rotationSpeed\" min=\"0\" max=\"0.1\" step=\"0.01\" value=\"0.01\">\n        </div>\n        <div>\n            <label for=\"rotationAxis\" class=\"font-bold\">Rotation Axis</label>\n            <select id=\"rotationAxis\" class=\"min-w-20 ml-2\">\n                <option value=\"x\">x</option>\n                <option value=\"y\" selected>y</option>\n                <option value=\"z\">z</option>\n            </select>\n        </div>\n        <div class=\"\">\n            <label for=\"rotationDirection\" class=\"font-bold\">Rotation Direction</label>\n            <select id=\"rotationDirection\">\n                <option value=\"1\">Clockwise</option>\n                <option value=\"-1\">Counter Clockwise</option>\n            </select>\n        </div>\n        <div>\n            <input type=\"checkbox\" id=\"showFacesLabels\">\n            <label for=\"showFacesLabels\" class=\"font-bold\">Show Face Labels</label>\n        </div>\n        <div>\n            <button id=\"resetRotation\" class=\"bg-blue-500 text-white p-2 rounded-md text-sm\">Reset Rotation</button>\n        </div>\n    </div>\n    `;\n\nsidebar.appendChild(sceneOptionsDiv);\n\nconst rotateCheckbox = document.getElementById(\"rotate\") as HTMLInputElement;\nconst rotationSpeedInput = document.getElementById(\n    \"rotationSpeed\",\n) as HTMLInputElement;\nconst rotationAxisSelect = document.getElementById(\n    \"rotationAxis\",\n) as HTMLSelectElement;\nconst rotationDirectionSelect = document.getElementById(\n    \"rotationDirection\",\n) as HTMLSelectElement;\n\nconst showFacesLabelsCheckbox = document.getElementById(\n    \"showFacesLabels\",\n) as HTMLInputElement;\n\nrotateCheckbox.checked = shouldRotate;\nrotationSpeedInput.value = rotationSpeed.toString();\nrotationAxisSelect.value = rotationAxis;\nrotationDirectionSelect.value = rotationDirection.toString();\nshowFacesLabelsCheckbox.checked = showFacesLabels;\n\nrotateCheckbox.addEventListener(\"change\", () => {\n    shouldRotate = rotateCheckbox.checked;\n});\n\nrotationSpeedInput.addEventListener(\"input\", () => {\n    rotationSpeed = parseFloat(rotationSpeedInput.value);\n});\n\nrotationAxisSelect.addEventListener(\"change\", () => {\n    rotationAxis = rotationAxisSelect.value;\n});\n\nrotationDirectionSelect.addEventListener(\"change\", () => {\n    rotationDirection = parseInt(rotationDirectionSelect.value);\n});\n\nshowFacesLabelsCheckbox.addEventListener(\"change\", () => {\n    showFacesLabels = showFacesLabelsCheckbox.checked;\n});\n\nconst rotateMesh = () => {\n    if (shouldRotate) {\n        mesh.rotation[rotationAxis as \"x\" | \"y\"] +=\n            rotationSpeed * rotationDirection;\n    }\n};\n\nconst resetMeshRotation = () => {\n    shouldRotate = false;\n    rotateCheckbox.checked = false;\n    mesh.rotation.set(0, 0, 0);\n};\n\nconst resetRotationButton = document.getElementById(\n    \"resetRotation\",\n) as HTMLButtonElement;\nresetRotationButton.addEventListener(\"click\", resetMeshRotation);\n\nconst animate = () => {\n    materials.forEach((material) => {\n        const isWireframe = shouldShowWireframe();\n        material.wireframe = isWireframe;\n    });\n\n    verticesLabels.forEach((label) => {\n        label.visible = shouldShowLabels();\n    });\n\n    faceLabels.forEach((label) => {\n        label.visible = shouldShowLabels() && showFacesLabels;\n    });\n\n    rotateMesh();\n    requestAnimationFrame(animate);\n    render();\n};\n\nanimate();\n\naddHelpNote({\n    title: \"Scene Options\",\n    description: \"These options are specified for this scene:\",\n    points: [\n        \"Rotate: Start/Stop the rotation of the mesh.\",\n        \"Rotation Speed: Adjust the speed of rotation. Default is 0.01.\",\n        \"Rotation Axis: Change the axis of rotation, the shape will rotate around this axis.\",\n        \"Rotation Direction: Change the direction of rotation. Default is clockwise.\",\n        \"Show Face Labels: Show/Hide labels for each face. The global 'Show Labels' control option should be enabled.\",\n        \"Reset Rotation: Stop the rotation and reset the shape's rotation to the last state before rotation started.\",\n    ],\n});\n"],"names":["scene","render","addHelpNote","shouldShowWireframe","shouldShowLabels","sidebar","createBaseScene","geometry","THREE.BufferGeometry","vertices","indices","THREE.BufferAttribute","shadeOfRed","r","THREE.MathUtils","THREE.Color","baseMaterial","THREE.DoubleSide","THREE.NoBlending","createFaceMaterial","THREE.MeshLambertMaterial","materials","mesh","THREE.Mesh","numVertices","verticesLabels","i","x","y","z","label","createTextSprite","faceLabels","group","faceLabel","faceCenterCoords","acc","vertexIndex","faceCenter","THREE.Vector3","shouldRotate","rotationSpeed","rotationAxis","rotationDirection","showFacesLabels","sceneOptionsDiv","rotateCheckbox","rotationSpeedInput","rotationAxisSelect","rotationDirectionSelect","showFacesLabelsCheckbox","rotateMesh","resetMeshRotation","resetRotationButton","animate","material","isWireframe"],"mappings":"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"}