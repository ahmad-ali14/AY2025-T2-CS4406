{"version":3,"file":"index-B0kS21RO.js","sources":["../../src/unit4/images/1.jpg","../../src/unit4/images/2.jpg","../../src/unit4/images/3.jpeg","../../src/unit4/images/4.jpg","../../src/unit4/code.ts"],"sourcesContent":["export default \"__VITE_ASSET__C8H8VVXH__\"","export default \"__VITE_ASSET__CQm3q94F__\"","export default \"__VITE_ASSET__C0aECaay__\"","export default \"__VITE_ASSET__DhuJz_de__\"","import * as THREE from \"three\";\nimport { createBaseScene } from \"../utils/createBaseScene\";\nimport img1 from \"./images/1.jpg\";\nimport img2 from \"./images/2.jpg\";\nimport img3 from \"./images/3.jpeg\";\nimport img4 from \"./images/4.jpg\";\n\nconst { render, scene, sidebar, addHelpNote } = createBaseScene({\n    sceneTitle: \"Unit 4: Textured Cube\",\n    cameraZ: window.innerHeight,\n    defaultLightColor: \"#ffffff\",\n    showAxes: false,\n    showGrid: false,\n});\n\nconst defaultCubeSideLength = 500;\nconst cubeGeometry = new THREE.BoxGeometry(\n    defaultCubeSideLength,\n    defaultCubeSideLength,\n    defaultCubeSideLength,\n);\n\n// put an image on each face of the cube\nconst cubeMaterials = [\n    // right side\n    new THREE.MeshBasicMaterial({\n        map: new THREE.TextureLoader().load(img1),\n    }),\n    // left side\n    new THREE.MeshBasicMaterial({\n        map: new THREE.TextureLoader().load(img2),\n    }),\n    // top side\n    new THREE.MeshBasicMaterial({ color: 0x00ff00 }),\n    // bottom side\n    new THREE.MeshBasicMaterial({ color: 0xff0000 }),\n    // front side\n    new THREE.MeshBasicMaterial({\n        map: new THREE.TextureLoader().load(img3),\n    }),\n    // back side\n    new THREE.MeshBasicMaterial({\n        map: new THREE.TextureLoader().load(img4),\n    }),\n];\n\nconst cube = new THREE.Mesh(cubeGeometry, cubeMaterials);\nscene.add(cube);\n\nlet shouldRotate = true;\nlet rotationSpeed = 0.01;\nlet rotationAxis = \"y\";\nlet rotationDirection = 1;\n\nconst sceneOptionsDiv = document.createElement(\"div\");\nsceneOptionsDiv.classList.add(\"mb-4\");\n\nsceneOptionsDiv.innerHTML = `\n    <hr class=\"border border-b-[#000] mb-2\" />\n    <h2 class=\"text-xl font-bold text-center mb-2\">Scene Options</h2>\n    <div class=\"flex flex-col space-y-2 text-lg\">\n        <div>\n            <input type=\"checkbox\" id=\"rotate\" checked>\n            <label for=\"rotate\" class=\"font-bold\">Rotate</label>\n        </div>\n        <div>\n            <label for=\"rotationSpeed\" class=\"font-bold\">Rotation Speed</label>\n            <input type=\"range\" id=\"rotationSpeed\" min=\"0\" max=\"0.1\" step=\"0.01\" value=\"0.01\">\n        </div>\n        <div>\n            <label for=\"cubeSideLength\" class=\"font-bold\">Cube Side Length</label>\n            <input type=\"range\" id=\"cubeSideLength\" min=\"50\" max=\"500\" step=\"1\" value=\"${defaultCubeSideLength}\">\n        </div>\n        <div>\n            <label for=\"rotationAxis\" class=\"font-bold\">Rotation Axis</label>\n            <select id=\"rotationAxis\" class=\"min-w-20 ml-2\">\n                <option value=\"x\">x</option>\n                <option value=\"y\" selected>y</option>\n                <option value=\"z\">z</option>\n            </select>\n        </div>\n        <div class=\"\">\n            <label for=\"rotationDirection\" class=\"font-bold\">Rotation Direction</label>\n            <select id=\"rotationDirection\">\n                <option value=\"1\">Clockwise</option>\n                <option value=\"-1\">Counter Clockwise</option>\n            </select>\n        </div>\n        <div>\n            <button id=\"resetRotation\" class=\"bg-blue-500 text-white p-2 rounded-md text-sm\">Reset Rotation</button>\n        </div>\n    </div>\n    `;\n\nsidebar.appendChild(sceneOptionsDiv);\n\nconst rotateCheckbox = document.getElementById(\"rotate\") as HTMLInputElement;\nconst rotationSpeedInput = document.getElementById(\n    \"rotationSpeed\",\n) as HTMLInputElement;\nconst rotationAxisSelect = document.getElementById(\n    \"rotationAxis\",\n) as HTMLSelectElement;\nconst rotationDirectionSelect = document.getElementById(\n    \"rotationDirection\",\n) as HTMLSelectElement;\n\nconst cubeSideLengthInput = document.getElementById(\n    \"cubeSideLength\",\n) as HTMLInputElement;\n\nrotateCheckbox.checked = shouldRotate;\nrotationSpeedInput.value = rotationSpeed.toString();\nrotationAxisSelect.value = rotationAxis;\nrotationDirectionSelect.value = rotationDirection.toString();\n\nrotateCheckbox.addEventListener(\"change\", () => {\n    shouldRotate = rotateCheckbox.checked;\n});\n\nrotationSpeedInput.addEventListener(\"input\", () => {\n    rotationSpeed = parseFloat(rotationSpeedInput.value);\n});\n\nrotationAxisSelect.addEventListener(\"change\", () => {\n    rotationAxis = rotationAxisSelect.value;\n});\n\nrotationDirectionSelect.addEventListener(\"change\", () => {\n    rotationDirection = parseInt(rotationDirectionSelect.value);\n});\n\ncubeSideLengthInput.addEventListener(\"input\", () => {\n    const newCubeSideLength = parseFloat(cubeSideLengthInput.value);\n    cube.scale.set(\n        newCubeSideLength / defaultCubeSideLength,\n        newCubeSideLength / defaultCubeSideLength,\n        newCubeSideLength / defaultCubeSideLength,\n    );\n});\n\nconst rotateCube = () => {\n    if (shouldRotate) {\n        cube.rotation[rotationAxis as \"x\" | \"y\"] +=\n            rotationSpeed * rotationDirection;\n    }\n};\n\nconst resetCubeRotation = () => {\n    shouldRotate = false;\n    rotateCheckbox.checked = false;\n    cube.rotation.set(0, 0, 0);\n};\n\nconst resetRotationButton = document.getElementById(\n    \"resetRotation\",\n) as HTMLButtonElement;\nresetRotationButton.addEventListener(\"click\", resetCubeRotation);\n\nconst animate = () => {\n    requestAnimationFrame(animate); // prepare for the next frame\n    rotateCube(); // rotate the cube\n    render(); // re-render the scene\n};\n\nanimate();\n\naddHelpNote({\n    title: \"Scene Options\",\n    description: \"These options are specified for this scene:\",\n    points: [\n        \"Rotate: Start/Stop the rotation of the mesh.\",\n        \"Rotation Speed: Adjust the speed of rotation. Default is 0.01.\",\n        \"Cube Side Length: Adjust the side length of the cube. Default is 500.\",\n        \"Rotation Axis: Change the axis of rotation, the shape will rotate around this axis.\",\n        \"Rotation Direction: Change the direction of rotation. Default is clockwise.\",\n        \"Reset Rotation: Stop the rotation and reset the shape's rotation to the last state before rotation started.\",\n    ],\n});\n"],"names":["img1","img2","img3","img4","render","scene","sidebar","addHelpNote","createBaseScene","defaultCubeSideLength","cubeGeometry","THREE.BoxGeometry","cubeMaterials","THREE.MeshBasicMaterial","THREE.TextureLoader","cube","THREE.Mesh","shouldRotate","rotationSpeed","rotationAxis","rotationDirection","sceneOptionsDiv","rotateCheckbox","rotationSpeedInput","rotationAxisSelect","rotationDirectionSelect","cubeSideLengthInput","newCubeSideLength","rotateCube","resetCubeRotation","resetRotationButton","animate"],"mappings":"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"}